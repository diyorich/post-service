// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	model "post-storage-service/internal/model"
	reflect "reflect"

	pkg "github.com/diyorich/post-api/pkg"
	gomock "github.com/golang/mock/gomock"
)

// MockPostService is a mock of PostService interface.
type MockPostService struct {
	ctrl     *gomock.Controller
	recorder *MockPostServiceMockRecorder
}

// MockPostServiceMockRecorder is the mock recorder for MockPostService.
type MockPostServiceMockRecorder struct {
	mock *MockPostService
}

// NewMockPostService creates a new mock instance.
func NewMockPostService(ctrl *gomock.Controller) *MockPostService {
	mock := &MockPostService{ctrl: ctrl}
	mock.recorder = &MockPostServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostService) EXPECT() *MockPostServiceMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockPostService) GetByID(ctx context.Context, ID uint64) (model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, ID)
	ret0, _ := ret[0].(model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockPostServiceMockRecorder) GetByID(ctx, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockPostService)(nil).GetByID), ctx, ID)
}

// GetList mocks base method.
func (m *MockPostService) GetList(ctx context.Context, pagination *pkg.Pagination) ([]model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetList", ctx, pagination)
	ret0, _ := ret[0].([]model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetList indicates an expected call of GetList.
func (mr *MockPostServiceMockRecorder) GetList(ctx, pagination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockPostService)(nil).GetList), ctx, pagination)
}

// MockPostFetcherService is a mock of PostFetcherService interface.
type MockPostFetcherService struct {
	ctrl     *gomock.Controller
	recorder *MockPostFetcherServiceMockRecorder
}

// MockPostFetcherServiceMockRecorder is the mock recorder for MockPostFetcherService.
type MockPostFetcherServiceMockRecorder struct {
	mock *MockPostFetcherService
}

// NewMockPostFetcherService creates a new mock instance.
func NewMockPostFetcherService(ctrl *gomock.Controller) *MockPostFetcherService {
	mock := &MockPostFetcherService{ctrl: ctrl}
	mock.recorder = &MockPostFetcherServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostFetcherService) EXPECT() *MockPostFetcherServiceMockRecorder {
	return m.recorder
}

// FetchPosts mocks base method.
func (m *MockPostFetcherService) FetchPosts(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchPosts", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// FetchPosts indicates an expected call of FetchPosts.
func (mr *MockPostFetcherServiceMockRecorder) FetchPosts(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchPosts", reflect.TypeOf((*MockPostFetcherService)(nil).FetchPosts), ctx)
}
